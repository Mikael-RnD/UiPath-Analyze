name: 'UiPath Analyze'
description: 'Analyze uses UiPath Workflow Analyzer and will cause the job to stop on Rule Violations.'
inputs:
  projectFilePaths:
    description: 'Used for passing explicit paths to project files to perform analysis. Can be used as multi-line inputs'
    required: false
  orchestratorUrl: 
    description: 'Orchestrator instance URL, defaults to UiPath Automation Cloud'
    required: false
    default: "https://cloud.uipath.com/"
  orchestratorTenant:
    description: 'Tenant on the Orchestrator instance'
    required: true
  orchestratorFolder:
    description: 'Folder path in modern folder setup'
    required: true
  orchestratorApplicationId:
    description: 'Orchestrator Application ID for external application in Orchestrator'
    required: true
  orchestratorApplicationSecret:
    description: 'Application Secret for external application in Orchestrator'
    required: true
  orchestratorApplicationScope:
    description: 'Application scope for determining accesses of External Application'
    required: false
    default: "OR.Assets OR.BackgroundTasks OR.Execution OR.Folders OR.Jobs OR.Machines.Read OR.Monitoring OR.Robots.Read OR.Settings.Read OR.TestSets OR.TestSetExecutions OR.TestSetSchedules OR.Users.Read"
  orchestratorLogicalName:
    description: 'Logical name for Orchestrator instance'
    required: true
  rulesConfigFile:
    description: 'Path to a RulesConfig.json for customized workflow analysis rules'
    required: false
    default: ""
  ignoredRules:
    description: 'Comma-separated list of rules to ignore during analysis'
    required: false
    default: ""
outputs:
  analyzerResultsPath:
    description: 'Folder containing the workflow analysis result files in json format, intended for use cases such as uploading to artifact for review'
    value: ${{ steps.analyze.outputs.analyzerResultsPath }}
  analyzerResultsTable: 
    description: 'Markdown formatted table containing the workflow analysis results, intended for use cases such as writing to the step summary and sending as a comment to a pull request'
    value: ${{ steps.parse.outputs.analyzerResultsTable }}
  infoCount:
    description: 'Number of informational entries generated during analysis'
    value: ${{ steps.parse.outputs.infoCount }}
  warningCount:
    description: 'Number of warning entries generated during analysis'
    value: ${{ steps.parse.outputs.warningCount }}
  errorCount:
    description: 'Number of error entries generated during analysis'
    value: ${{ steps.parse.outputs.errorCount }}

runs:
  using: "composite"
  steps:
    - id: analyze
      name: Analyze
      shell: bash
      run: |
        analysisFailed=0
        rm -rf "${{ github.workspace }}/.github"
        echo "RulesConfig input: ${{ inputs.rulesConfigFile }}"

        RulesConfigPath="$HOME/.local/share/UiPath/Rules/RuleConfig.json"
        if [ -f "$RulesConfigPath" ]; then
          if [ -z "${{ inputs.rulesConfigFile }}" ]; then
            echo "Custom RulesConfig not provided, using default RulesConfig"
          else
            cp "${{ inputs.rulesConfigFile }}" "$RulesConfigPath"
            echo "$RulesConfigPath exists: $(test -f "$RulesConfigPath" && echo true || echo false)"
          fi
        fi

        if [ -z "${{ inputs.projectFilePaths }}" ]; then
          echo "Scanning full repository directory for project.json files"
          projectJsonFiles=$(find "${{ github.workspace }}" -type f -name "project.json")
        else
          echo "Getting full path for files given as inputs"
          projectJsonFiles=$(echo "${{ inputs.projectFilePaths }}" | tr '\r\n' '\n' | sed '/^\s*$/d' | while read -r line; do echo "${{ github.workspace }}/$line"; done)
        fi

        if [ -z "${{ inputs.ignoredRules }}" ]; then
          echo "No ignored rules provided"
          ignoredRulesArg=""
        else
          echo "Ignoring rules: ${{ inputs.ignoredRules }}"
          ignoredRulesArg="--ignoredRules=\"${{ inputs.ignoredRules }}\""
          echo "$ignoredRulesArg"
        fi

        analyzerResultPath="${{ github.workspace }}/analyzer-results"
        echo "analyzerResultsPath=$analyzerResultPath" >> "$GITHUB_OUTPUT"
        mkdir -p "$analyzerResultPath"

        while IFS= read -r p; do 
          echo "Analyzing project: $p"
          projectName=$(jq -r '.name' "$p")
          analyzerResultFile="$analyzerResultPath/$projectName.json"
          echo "Creating result file $analyzerResultFile"

          uipcli package analyze "$p" \
            --stopOnRuleViolation \
            --analyzerTraceLevel "Warning" \
            --orchestratorUrl "${{ inputs.orchestratorUrl }}" \
            --orchestratorTenant "${{ inputs.orchestratorTenant }}" \
            --orchestratorAccountForApp "${{ inputs.orchestratorLogicalName }}" \
            --orchestratorApplicationId "${{ inputs.orchestratorApplicationId }}" \
            --orchestratorApplicationSecret "${{ inputs.orchestratorApplicationSecret }}" \
            --orchestratorApplicationScope "${{ inputs.orchestratorApplicationScope }}" \
            --orchestratorFolder "${{ inputs.orchestratorFolder }}" \
            --resultPath "$analyzerResultFile" \
            $ignoredRulesArg

          echo "Analyzer finished with $projectName"

          if [ $? -ne 0 ]; then
            analysisFailed=1
          fi
        done <<< "$projectJsonFiles"

        if [ $analysisFailed -ne 0 ]; then
          echo "Workflow analysis failed"
          exit 1
        fi

    - id: parse
      name: Write Step Summary and Parse Results
      if: always()
      shell: bash
      run: |
        echo "analyzerResultsPath: ${{ steps.analyze.outputs.analyzerResultsPath }}"
        analyzerResultPath="${{ steps.analyze.outputs.analyzerResultsPath }}"

        # Handle file paths with spaces correctly
        analyzerResultFiles=()
        while IFS= read -r file; do
          analyzerResultFiles+=("$file")
        done < <(find "$analyzerResultPath" -type f)

        analyzerStepSummary=""
        totalErrorCount=0
        totalWarningCount=0
        totalInfoCount=0

        for file in "${analyzerResultFiles[@]}"; do
          echo "Parsing analyzer results from $file"

          errorCount=0
          warningCount=0
          infoCount=0

          infoText=":information_source: Info"
          warningText=":warning: Warning"
          errorText=":x: Error"

          analyzerResult=$(jq 'sort_by(.ErrorSeverity, .FilePath)' "$file")
          analyzerTable="|Severity|ErrorCode/DocumentationLink|RuleName|Description|Recommendation|FilePath|"
          analyzerTable+="\n|:--|:--|:--|:--|:--|:--|"
          echo "$analyzerResult"

          echo "$analyzerResult" | jq -c '.[]' > temp_results.json
          if [ "${{ contains(runner.os, 'windows') }}" = "true" ]; then
            echo "Normalizing newlines for Windows"
            dos2unix temp_results.json  # Normalize newlines
          fi
          
          while IFS= read -r result; do
            severity=""
            errorSeverity=$(echo "$result" | jq -r '.ErrorSeverity')

            if [ "$errorSeverity" -eq 3 ]; then
              severity="$infoText"
              infoCount=$((infoCount + 1))
            elif [ "$errorSeverity" -eq 2 ]; then
              severity="$warningText"
              warningCount=$((warningCount + 1))
            elif [ "$errorSeverity" -eq 1 ]; then
              severity="$errorText"
              errorCount=$((errorCount + 1))
            fi

            description=$(echo "$result" | jq -r '.Description // ""' | tr '\r\n' ' ')
            recommendation=$(echo "$result" | jq -r '.Recommendation // ""' | tr '\r\n' ' ')
            analyzerTable+="\n| $severity | [$(echo "$result" | jq -r '.ErrorCode // ""')]($(echo "$result" | jq -r '.DocumentationLink // ""')) | $(echo "$result" | jq -r '.RuleName // ""') | $description | $recommendation | $(echo "$result" | jq -r '.FilePath // ""') |"
          done < temp_results.json
          rm temp_results.json

          projectName=$(basename "$file" .json)
          projectSummary="\n - ${errorText}: $errorCount \n - ${warningText}: $warningCount \n - ${infoText}: $infoCount \n"
          analyzerStepSummary+="\n<details>\n<summary>${projectName} -- ${errorText}: $errorCount -- ${warningText}: $warningCount -- ${infoText}: $infoCount</summary>\n"
          analyzerStepSummary+="$projectSummary\n$analyzerTable\n</details>\n"

          totalErrorCount=$((totalErrorCount + errorCount))
          totalWarningCount=$((totalWarningCount + warningCount))
          totalInfoCount=$((totalInfoCount + infoCount))
          echo ""
        done

        echo "analyzerResultsTable<<EOF" >> "$GITHUB_OUTPUT"
        echo -e "$analyzerStepSummary" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"

        echo "## Workflow Analysis Results" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo -e "$analyzerStepSummary" >> "$GITHUB_STEP_SUMMARY"

        echo "errorCount=$totalErrorCount" >> "$GITHUB_OUTPUT"
        echo "warningCount=$totalWarningCount" >> "$GITHUB_OUTPUT"
        echo "infoCount=$totalInfoCount" >> "$GITHUB_OUTPUT"
