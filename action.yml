name: 'UiPath Pack'
description: 'Analyzes and packs all UiPath projects within the repository it runs in. Analyze uses UiPath Workflow Analyzer and will cause the job to stop on Rule Violationes.'
inputs:
  projectFilePaths:
    description: 'Used for passing explicit paths to project files to perform analysis. Can be used as multi-line inputs'
    required: false
  orchestratorUrl: 
    description: 'Orchestrator instance URL'
    required: true
  orchestratorTenant:
    description: 'Tenant on the Orchestrator instance'
    required: true
  orchestratorFolder:
    description: 'Folder path in modern folder setup'
    required: true
  orchestratorApplicationId:
    description: 'Orchestrator Application ID for external applicaiton in Orchestrator'
    required: true
  orchestratorApplicationSecret:
    description: 'Application Secret for external application in Orchestrator'
    required: true
  orchestratorApplicationScope:
    description: 'Application scope for determining accesses of External Application'
    required: true
  orchestratorLogicalName:
    description: 'Logical name for Orchestrator instance'
    required: true
  rulesConfigFile:
    description: 'Path to a RulesConfig.json for customized workflow analysis rules'
    required: false
    default: ""
outputs:
  analyzerResultsPath:
    description: 'Folder containing the workflow analysis result files in json format, intended for use cases such as uploading to artifact for review'
    value: ${{ steps.analyze.outputs.analyzerResultsPath }}
  analyzerResultsTable: 
    description: 'Markdown formatted table containing the workflow analysis results, intended for use cases such as writing to the step summary and sending as a comment to a pull request'
    value: ${{ steps.parse.outputs.analyzerResultsTable }}

runs:
  using: "composite"
  steps:
    - id: analyze
      name: Analyze
      shell: powershell
      run: |
        $analysisFailed = 0
        Remove-Item '${{ github.workspace }}\.github' -Recurse
        Write-Host 'RulesConfig input: ${{ inputs.rulesConfigFile }}'
        
        $RulesConfigPath = Join-Path $env:LOCALAPPDATA -ChildPath "\UiPath\Rules\RuleConfig.json"
        if(Test-Path $RulesConfigPath)
        {
          if([string]::IsNullOrEmpty("${{ inputs.rulesConfigFile }}"))
          {
            Write-Host "Custom RulesConfig not provided, using default RulesConfig"
          }
          else
          {
            Copy-Item -Path ${{ inputs.rulesConfigFile }} -Destination $RulesConfigPath -Force
            Write-Host $RulesConfigPath exists: 
            Test-Path $RulesConfigPath
          }
        }
        if([string]::IsNullOrEmpty("${{ inputs.projectFilePaths }}")) 
        {
          Write-Host "Scanning full repository directory for project.json files"
          $projectJsonFiles = Get-ChildItem -Path ${{ github.workspace }} -Recurse -Filter project.json -File
        } 
        else 
        {
          Write-Host "Getting full path for files given as inputs"
          $projectJsonFiles = "${{ inputs.projectFilePaths }}".Trim()
          $projectJsonFiles = $projectJsonFiles -split "`r`n"
          $projectJsonFiles | Where { -not  [string]::IsNullOrWhiteSpace($_) } | Get-ChildItem -File
        }

        $analyzerResultPath = "${{ github.workspace }}\analyzer-results".Trim()

        Write-Output "analyzerResultsPath=$analyzerResultPath" >> $Env:GITHUB_OUTPUT
        
        New-Item -ItemType "directory" -Path $analyzerResultPath

        foreach($p in $projectJsonFiles)
        {
          Write-Host "Analyzing project: $p"
          $project = [System.IO.FileInfo]$p
          $projectInfo = Get-Content "$($project.FullName)" | ConvertFrom-Json
          $projectName = $projectInfo.name 
          $analyzerResultFile = "$analyzerResultPath\" + $projectName + ".json"
          Write-Host "Creating result file $analyzerResultFile"

          uipcli package analyze "$($project.FullName)" `
            --stopOnRuleViolation `
            --analyzerTraceLevel "Warning" `
            --orchestratorUrl "${{ inputs.orchestratorUrl }}" `
            --orchestratorTenant "${{ inputs.OrchestratorTenant }}" `
            --orchestratorAccountForApp "${{ inputs.orchestratorLogicalName }}" `
            --orchestratorApplicationId "${{ inputs.orchestratorApplicationId }}" `
            --orchestratorApplicationSecret "${{ inputs.orchestratorApplicationSecret }}" `
            --orchestratorApplicationScope "${{ inputs.orchestratorApplicationScope }}" `
            --orchestratorFolder "${{ inputs.orchestratorFolder }}" `
            --resultPath "$analyzerResultFile"

          Write-Host "Analyzer finished with $projectName"

          if($LASTEXITCODE -ne 0)
          {
            $analysisFailed = 1
          }
        }
        if($analysisFailed -ne 0)
        {
          throw "Workflow analysis failed"
        }

    - id: parse
      name: Write Step Summary and Parse Results
      if: always()
      shell: pwsh
      run:  |
        echo "analyzerResultsPath: ${{ steps.analyze.outputs.analyzerResultsPath }}"
        $analyzerResultPath = "${{ steps.analyze.outputs.analyzerResultsPath }}"

        $analyzerResultFiles = Get-ChildItem $analyzerResultPath
        $analyzerStepSummary = ""

        foreach($file in $analyzerResultFiles){
          Write-Host $file.FullName
          
          $projectName = [System.IO.Path]::GetFileNameWithoutExtension($file.FullName)
          $analyzerStepSummary += "`n### $projectName`n"

          $analyzerResult = Get-Content "$($file.FullName)" | ConvertFrom-Json
          $analyzerTable = "|Severity|ErrorCode|RuleName|Description|Recommendation|DocumentationLink|FilePath|"
          $analyzerTable += "`n|:--|:--|:--|:--|:--|:--|:--|`n"

          for($i = 0; $i -lt $analyzerResult.Length; $i++){
            $description = "$($analyzerResult[$i].Description.Replace([System.Environment]::NewLine, ''))"
            $recommendation = "$($analyzerResult[$i].Recommendation.Replace([System.Environment]::NewLine, ''))"
            $analyzerTable += "| $($analyzerResult[$i].ErrorSeverity) | $($analyzerResult[$i].ErrorCode) | $($analyzerResult[$i].RuleName) | $description | $recommendation | $($analyzerResult[$i].DocumentationLink) | $($analyzerResult[$i].FilePath) |`n"
          }  
          $analyzerStepSummary += $analyzerTable
        }

        echo 'analyzerResultsTable<<EOF' >> $Env:GITHUB_OUTPUT
        echo "$analyzerStepSummary" >> $Env:GITHUB_STEP_OUTPUT
        echo EOF >> $Env:GITHUB_OUTPUT

        echo "<details>" >> $Env:GITHUB_STEP_SUMMARY
        echo "<summary>Workflow Analysis Results</summary>" >> $Env:GITHUB_STEP_SUMMARY
        echo "" >> $Env:GITHUB_STEP_SUMMARY
        echo "$analyzerStepSummary" >> $Env:GITHUB_STEP_SUMMARY
        echo "" >> $Env:GITHUB_STEP_SUMMARY
        echo "</details>" >> $Env:GITHUB_STEP_SUMMARY
