name: 'UiPath Pack'
description: 'Analyzes and packs all UiPath projects within the repository it runs in. Analyze uses UiPath Workflow Analyzer and will cause the job to stop on Rule Violationes.'
inputs:
  projectFilePaths:
    description: 'Used for passing explicit paths to project files to perform analysis. Can be used as multi-line inputs'
    required: false
    default: '*'
  orchestratorUrl: 
    description: 'Orchestrator instance URL'
    required: true
  orchestratorTenant:
    description: 'Tenant on the Orchestrator instance'
    required: true
  orchestratorFolder:
    description: 'Folder path in modern folder setup'
    required: true
  orchestratorApplicationId:
    description: 'Orchestrator Application ID for external applicaiton in Orchestrator'
    required: true
  orchestratorApplicationSecret:
    description: 'Application Secret for external application in Orchestrator'
    required: true
  orchestratorApplicationScope:
    description: 'Application scope for determining accesses of External Application'
    required: true
  orchestratorLogicalName:
    description: 'Logical name for Orchestrator instance'
    required: true
  rulesConfigFile:
    description: 'Path to a RulesConfig.json for customized workflow analysis rules'
    required: false
    default: 'none'

runs:
  using: "composite"
  steps:
    - name: Analyze
      shell: powershell
      run: |
        $analysisFailed = 0
        Remove-Item '${{ github.workspace }}\.github' -Recurse
        Write-Host 'RulesConfig input: ${{ inputs.rulesConfigFile }}'
        
        $RulesConfigPath = Join-Path $env:LOCALAPPDATA -ChildPath "\UiPath\Rules\RuleConfig.json"
        if(Test-Path $RulesConfigPath)
        {
          if(${{ inputs.rulesConfigFile }} ne 'none')
          {
            Copy-Item -Path ${{ inputs.rulesConfigFile }} -Destination $RulesConfigPath -Force
            Write-Host $RulesConfigPath exists: 
            Test-Path $RulesConfigPath
          }
        }
        if(${{ inputs.projectFilePaths }} ne '*') 
        {
          Write-Host "Getting full path for files given as inputs"
          $projectJsonFiles = ${{ inputs.projectFilePaths }} -split "`r`n"
          $projectJsonFiles | Resolve-Path
          $projectJsonFiles | Get-ChildItem -File
        } 
        else 
        {
          Write-Host "Scanning full repository directory for project.json files"
          $projectJsonFiles = Get-ChildItem -Path ${{ github.workspace }} -Recurse -Filter project.json -File
        }
        foreach($project in $projectJsonFiles)
        {
          & uipcli package analyze "$($project.FullName)" --stopOnRuleViolation --analyzerTraceLevel "Error" --orchestratorUrl ${{ inputs.orchestratorUrl }} --orchestratorTenant ${{ inputs.OrchestratorTenant }} --orchestratorAccountForApp ${{ inputs.orchestratorLogicalName }} --orchestratorApplicationId "${{ inputs.orchestratorApplicationId }}" --orchestratorApplicationSecret "${{ inputs.orchestratorApplicationSecret }}" --orchestratorApplicationScope "${{ inputs.orchestratorApplicationScope }}" --orchestratorFolder "${{ inputs.orchestratorFolder }}"
          if($LASTEXITCODE -ne 0)
          {
            $analysisFailed = 1
          }
        }
        if($analysisFailed -ne 0)
        {
          throw "Workflow analysis failed"
        }
